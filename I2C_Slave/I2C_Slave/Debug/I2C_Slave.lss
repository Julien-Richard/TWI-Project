
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000190c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000073  00802000  00802000  00001980  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000987f  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040b1  00000000  00000000  0000b563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d49  00000000  00000000  0000f614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010a0  00000000  00000000  00013360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f300  00000000  00000000  00014400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003828  00000000  00000000  00043700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00046f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ab16  00000000  00000000  000471f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__vector_12>
      34:	9c c1       	rjmp	.+824    	; 0x36e <__vector_13>
      36:	00 00       	nop
      38:	fa c2       	rjmp	.+1524   	; 0x62e <__vector_14>
      3a:	00 00       	nop
      3c:	25 c3       	rjmp	.+1610   	; 0x688 <__vector_15>
      3e:	00 00       	nop
      40:	50 c3       	rjmp	.+1696   	; 0x6e2 <__vector_16>
      42:	00 00       	nop
      44:	7b c3       	rjmp	.+1782   	; 0x73c <__vector_17>
      46:	00 00       	nop
      48:	a6 c3       	rjmp	.+1868   	; 0x796 <__vector_18>
      4a:	00 00       	nop
      4c:	d1 c3       	rjmp	.+1954   	; 0x7f0 <__vector_19>
      4e:	00 00       	nop
      50:	fc c3       	rjmp	.+2040   	; 0x84a <__vector_20>
      52:	00 00       	nop
      54:	27 c4       	rjmp	.+2126   	; 0x8a4 <__vector_21>
      56:	00 00       	nop
      58:	52 c4       	rjmp	.+2212   	; 0x8fe <__vector_22>
      5a:	00 00       	nop
      5c:	7d c4       	rjmp	.+2298   	; 0x958 <__vector_23>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c0       	rjmp	.+416    	; 0x23e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ce c0       	rjmp	.+412    	; 0x23e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cc c0       	rjmp	.+408    	; 0x23e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ca c0       	rjmp	.+404    	; 0x23e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	81 c1       	rjmp	.+770    	; 0x3bc <__vector_46>
      ba:	00 00       	nop
      bc:	3c c6       	rjmp	.+3192   	; 0xd36 <__vector_47>
      be:	00 00       	nop
      c0:	67 c6       	rjmp	.+3278   	; 0xd90 <__vector_48>
      c2:	00 00       	nop
      c4:	92 c6       	rjmp	.+3364   	; 0xdea <__vector_49>
      c6:	00 00       	nop
      c8:	bd c6       	rjmp	.+3450   	; 0xe44 <__vector_50>
      ca:	00 00       	nop
      cc:	e8 c6       	rjmp	.+3536   	; 0xe9e <__vector_51>
      ce:	00 00       	nop
      d0:	13 c7       	rjmp	.+3622   	; 0xef8 <__vector_52>
      d2:	00 00       	nop
      d4:	3e c7       	rjmp	.+3708   	; 0xf52 <__vector_53>
      d6:	00 00       	nop
      d8:	69 c7       	rjmp	.+3794   	; 0xfac <__vector_54>
      da:	00 00       	nop
      dc:	94 c7       	rjmp	.+3880   	; 0x1006 <__vector_55>
      de:	00 00       	nop
      e0:	bf c7       	rjmp	.+3966   	; 0x1060 <__vector_56>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	90 c0       	rjmp	.+288    	; 0x23e <__bad_interrupt>
     11e:	00 00       	nop
     120:	8e c0       	rjmp	.+284    	; 0x23e <__bad_interrupt>
     122:	00 00       	nop
     124:	8c c0       	rjmp	.+280    	; 0x23e <__bad_interrupt>
     126:	00 00       	nop
     128:	8a c0       	rjmp	.+276    	; 0x23e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	3e c4       	rjmp	.+2172   	; 0x9b2 <__vector_77>
     136:	00 00       	nop
     138:	69 c4       	rjmp	.+2258   	; 0xa0c <__vector_78>
     13a:	00 00       	nop
     13c:	94 c4       	rjmp	.+2344   	; 0xa66 <__vector_79>
     13e:	00 00       	nop
     140:	bf c4       	rjmp	.+2430   	; 0xac0 <__vector_80>
     142:	00 00       	nop
     144:	ea c4       	rjmp	.+2516   	; 0xb1a <__vector_81>
     146:	00 00       	nop
     148:	15 c5       	rjmp	.+2602   	; 0xb74 <__vector_82>
     14a:	00 00       	nop
     14c:	40 c5       	rjmp	.+2688   	; 0xbce <__vector_83>
     14e:	00 00       	nop
     150:	6b c5       	rjmp	.+2774   	; 0xc28 <__vector_84>
     152:	00 00       	nop
     154:	96 c5       	rjmp	.+2860   	; 0xc82 <__vector_85>
     156:	00 00       	nop
     158:	c1 c5       	rjmp	.+2946   	; 0xcdc <__vector_86>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	84 c7       	rjmp	.+3848   	; 0x10ba <__vector_108>
     1b2:	00 00       	nop
     1b4:	af c7       	rjmp	.+3934   	; 0x1114 <__vector_109>
     1b6:	00 00       	nop
     1b8:	da c7       	rjmp	.+4020   	; 0x116e <__vector_110>
     1ba:	00 00       	nop
     1bc:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_111>
     1c0:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_112>
     1c4:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_113>
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ec e0       	ldi	r30, 0x0C	; 12
     214:	f9 e1       	ldi	r31, 0x19	; 25
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 30       	cpi	r26, 0x00	; 0
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a3 37       	cpi	r26, 0x73	; 115
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 41 0c 	call	0x1882	; 0x1882 <main>
     23a:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     244:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
     248:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
     24c:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     24e:	83 ff       	sbrs	r24, 3
     250:	08 c0       	rjmp	.+16     	; 0x262 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     252:	88 60       	ori	r24, 0x08	; 8
     254:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     25a:	86 ef       	ldi	r24, 0xF6	; 246
     25c:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
     260:	83 c0       	rjmp	.+262    	; 0x368 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     262:	98 2f       	mov	r25, r24
     264:	94 71       	andi	r25, 0x14	; 20
     266:	31 f0       	breq	.+12     	; 0x274 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
     272:	7a c0       	rjmp	.+244    	; 0x368 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     274:	86 ff       	sbrs	r24, 6
     276:	43 c0       	rjmp	.+134    	; 0x2fe <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     278:	c0 e0       	ldi	r28, 0x00	; 0
     27a:	d0 e2       	ldi	r29, 0x20	; 32
     27c:	aa 81       	ldd	r26, Y+2	; 0x02
     27e:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     280:	8c 81       	ldd	r24, Y+4	; 0x04
     282:	9d 81       	ldd	r25, Y+5	; 0x05
     284:	14 96       	adiw	r26, 0x04	; 4
     286:	2d 91       	ld	r18, X+
     288:	3c 91       	ld	r19, X
     28a:	15 97       	sbiw	r26, 0x05	; 5
     28c:	82 17       	cp	r24, r18
     28e:	93 07       	cpc	r25, r19
     290:	6c f4       	brge	.+26     	; 0x2ac <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     292:	9c 01       	movw	r18, r24
     294:	2f 5f       	subi	r18, 0xFF	; 255
     296:	3f 4f       	sbci	r19, 0xFF	; 255
     298:	20 93 04 20 	sts	0x2004, r18	; 0x802004 <__data_end+0x4>
     29c:	30 93 05 20 	sts	0x2005, r19	; 0x802005 <__data_end+0x5>
     2a0:	a8 0f       	add	r26, r24
     2a2:	b9 1f       	adc	r27, r25
     2a4:	11 96       	adiw	r26, 0x01	; 1
     2a6:	8c 91       	ld	r24, X
     2a8:	87 83       	std	Z+7, r24	; 0x07
     2aa:	5e c0       	rjmp	.+188    	; 0x368 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     2ac:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end+0x6>
     2b0:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x7>
     2b4:	18 96       	adiw	r26, 0x08	; 8
     2b6:	2d 91       	ld	r18, X+
     2b8:	3c 91       	ld	r19, X
     2ba:	19 97       	sbiw	r26, 0x09	; 9
     2bc:	82 17       	cp	r24, r18
     2be:	93 07       	cpc	r25, r19
     2c0:	c8 f4       	brcc	.+50     	; 0x2f4 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     2c2:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <__data_end+0x8>
     2c6:	22 23       	and	r18, r18
     2c8:	21 f0       	breq	.+8      	; 0x2d2 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     2ca:	86 81       	ldd	r24, Z+6	; 0x06
     2cc:	81 60       	ori	r24, 0x01	; 1
     2ce:	86 83       	std	Z+6, r24	; 0x06
     2d0:	4b c0       	rjmp	.+150    	; 0x368 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     2d2:	16 96       	adiw	r26, 0x06	; 6
     2d4:	2d 91       	ld	r18, X+
     2d6:	3c 91       	ld	r19, X
     2d8:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     2da:	ac 01       	movw	r20, r24
     2dc:	4f 5f       	subi	r20, 0xFF	; 255
     2de:	5f 4f       	sbci	r21, 0xFF	; 255
     2e0:	40 93 06 20 	sts	0x2006, r20	; 0x802006 <__data_end+0x6>
     2e4:	50 93 07 20 	sts	0x2007, r21	; 0x802007 <__data_end+0x7>
     2e8:	d9 01       	movw	r26, r18
     2ea:	a8 0f       	add	r26, r24
     2ec:	b9 1f       	adc	r27, r25
     2ee:	8c 91       	ld	r24, X
     2f0:	87 83       	std	Z+7, r24	; 0x07
     2f2:	3a c0       	rjmp	.+116    	; 0x368 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     2f8:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
     2fc:	35 c0       	rjmp	.+106    	; 0x368 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     2fe:	88 23       	and	r24, r24
     300:	84 f5       	brge	.+96     	; 0x362 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     302:	a0 e0       	ldi	r26, 0x00	; 0
     304:	b0 e2       	ldi	r27, 0x20	; 32
     306:	12 96       	adiw	r26, 0x02	; 2
     308:	cd 91       	ld	r28, X+
     30a:	dc 91       	ld	r29, X
     30c:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     30e:	16 96       	adiw	r26, 0x06	; 6
     310:	8d 91       	ld	r24, X+
     312:	9c 91       	ld	r25, X
     314:	17 97       	sbiw	r26, 0x07	; 7
     316:	28 85       	ldd	r18, Y+8	; 0x08
     318:	39 85       	ldd	r19, Y+9	; 0x09
     31a:	82 17       	cp	r24, r18
     31c:	93 07       	cpc	r25, r19
     31e:	d8 f4       	brcc	.+54     	; 0x356 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     320:	6e 81       	ldd	r22, Y+6	; 0x06
     322:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     324:	9c 01       	movw	r18, r24
     326:	2f 5f       	subi	r18, 0xFF	; 255
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <__data_end+0x6>
     32e:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <__data_end+0x7>
     332:	47 81       	ldd	r20, Z+7	; 0x07
     334:	db 01       	movw	r26, r22
     336:	a8 0f       	add	r26, r24
     338:	b9 1f       	adc	r27, r25
     33a:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     33c:	88 85       	ldd	r24, Y+8	; 0x08
     33e:	99 85       	ldd	r25, Y+9	; 0x09
     340:	28 17       	cp	r18, r24
     342:	39 07       	cpc	r19, r25
     344:	18 f4       	brcc	.+6      	; 0x34c <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	83 83       	std	Z+3, r24	; 0x03
     34a:	0e c0       	rjmp	.+28     	; 0x368 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     350:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
     354:	09 c0       	rjmp	.+18     	; 0x368 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     35a:	89 ef       	ldi	r24, 0xF9	; 249
     35c:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
     360:	03 c0       	rjmp	.+6      	; 0x368 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     362:	8b ef       	ldi	r24, 0xFB	; 251
     364:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
	}
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	0b b6       	in	r0, 0x3b	; 59
     37a:	0f 92       	push	r0
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	af 93       	push	r26
     38e:	bf 93       	push	r27
     390:	ef 93       	push	r30
     392:	ff 93       	push	r31
     394:	55 df       	rcall	.-342    	; 0x240 <twim_interrupt_handler>
     396:	ff 91       	pop	r31
     398:	ef 91       	pop	r30
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0b be       	out	0x3b, r0	; 59
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	0b b6       	in	r0, 0x3b	; 59
     3c8:	0f 92       	push	r0
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
     3e2:	2e df       	rcall	.-420    	; 0x240 <twim_interrupt_handler>
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0b be       	out	0x3b, r0	; 59
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <TWI_SlaveInitializeDriver>:
 *  \param processDataFunction  Pointer to the function that handles incoming data.
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
     40a:	fc 01       	movw	r30, r24
	twi->interface = module;
     40c:	60 83       	st	Z, r22
     40e:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     410:	42 83       	std	Z+2, r20	; 0x02
     412:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     414:	14 8a       	std	Z+20, r1	; 0x14
	twi->bytesSent = 0;
     416:	15 8a       	std	Z+21, r1	; 0x15
	twi->status = TWIS_STATUS_READY;
     418:	16 8a       	std	Z+22, r1	; 0x16
	twi->result = TWIS_RESULT_UNKNOWN;
     41a:	17 8a       	std	Z+23, r1	; 0x17
	twi->abort = false;
     41c:	10 8e       	std	Z+24, r1	; 0x18
     41e:	08 95       	ret

00000420 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     420:	dc 01       	movw	r26, r24
     422:	ed 91       	ld	r30, X+
     424:	fc 91       	ld	r31, X
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	48 63       	ori	r20, 0x38	; 56
     42a:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     42c:	ed 91       	ld	r30, X+
     42e:	fc 91       	ld	r31, X
     430:	66 0f       	add	r22, r22
     432:	63 87       	std	Z+11, r22	; 0x0b
     434:	08 95       	ret

00000436 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occurs.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     436:	fc 01       	movw	r30, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     438:	80 8d       	ldd	r24, Z+24	; 0x18
     43a:	88 23       	and	r24, r24
     43c:	51 f0       	breq	.+20     	; 0x452 <TWI_SlaveAddressMatchHandler+0x1c>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     43e:	a0 81       	ld	r26, Z
     440:	b1 81       	ldd	r27, Z+1	; 0x01
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	19 96       	adiw	r26, 0x09	; 9
     446:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     448:	86 e0       	ldi	r24, 0x06	; 6
     44a:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
     44c:	16 8a       	std	Z+22, r1	; 0x16
{
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
		twi->abort = false;
     44e:	10 8e       	std	Z+24, r1	; 0x18
     450:	08 95       	ret
	} else {
		twi->status = TWIS_STATUS_BUSY;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	86 8b       	std	Z+22, r24	; 0x16
		twi->result = TWIS_RESULT_UNKNOWN;
     456:	17 8a       	std	Z+23, r1	; 0x17

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     458:	a0 81       	ld	r26, Z
     45a:	b1 81       	ldd	r27, Z+1	; 0x01
     45c:	18 96       	adiw	r26, 0x08	; 8
     45e:	8c 91       	ld	r24, X
     460:	18 97       	sbiw	r26, 0x08	; 8
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     462:	8b 7f       	andi	r24, 0xFB	; 251
     464:	18 96       	adiw	r26, 0x08	; 8
     466:	8c 93       	st	X, r24

		twi->bytesReceived = 0;
     468:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
     46a:	15 8a       	std	Z+21, r1	; 0x15

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	81 87       	std	Z+9, r24	; 0x09
     476:	08 95       	ret

00000478 <TWI_SlaveStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
     478:	fc 01       	movw	r30, r24
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     47a:	a0 81       	ld	r26, Z
     47c:	b1 81       	ldd	r27, Z+1	; 0x01
     47e:	18 96       	adiw	r26, 0x08	; 8
     480:	8c 91       	ld	r24, X
     482:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     484:	8b 7f       	andi	r24, 0xFB	; 251
     486:	18 96       	adiw	r26, 0x08	; 8
     488:	8c 93       	st	X, r24

	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     48a:	a0 81       	ld	r26, Z
     48c:	b1 81       	ldd	r27, Z+1	; 0x01
     48e:	1a 96       	adiw	r26, 0x0a	; 10
     490:	8c 91       	ld	r24, X
     492:	1a 97       	sbiw	r26, 0x0a	; 10
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     494:	80 64       	ori	r24, 0x40	; 64
     496:	1a 96       	adiw	r26, 0x0a	; 10
     498:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
     49e:	16 8a       	std	Z+22, r1	; 0x16
     4a0:	08 95       	ret

000004a2 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	fc 01       	movw	r30, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     4a8:	a0 81       	ld	r26, Z
     4aa:	b1 81       	ldd	r27, Z+1	; 0x01
     4ac:	18 96       	adiw	r26, 0x08	; 8
     4ae:	8c 91       	ld	r24, X
     4b0:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     4b2:	84 60       	ori	r24, 0x04	; 4
     4b4:	18 96       	adiw	r26, 0x08	; 8
     4b6:	8c 93       	st	X, r24

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     4b8:	84 89       	ldd	r24, Z+20	; 0x14
     4ba:	88 30       	cpi	r24, 0x08	; 8
     4bc:	08 f5       	brcc	.+66     	; 0x500 <TWI_SlaveReadHandler+0x5e>
     4be:	ef 01       	movw	r28, r30
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     4c0:	01 90       	ld	r0, Z+
     4c2:	f0 81       	ld	r31, Z
     4c4:	e0 2d       	mov	r30, r0
     4c6:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     4c8:	9c 89       	ldd	r25, Y+20	; 0x14
     4ca:	fe 01       	movw	r30, r28
     4cc:	e9 0f       	add	r30, r25
     4ce:	f1 1d       	adc	r31, r1
     4d0:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     4d2:	ea 81       	ldd	r30, Y+2	; 0x02
     4d4:	fb 81       	ldd	r31, Y+3	; 0x03
     4d6:	19 95       	eicall

		twi->bytesReceived++;
     4d8:	8c 89       	ldd	r24, Y+20	; 0x14
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	8c 8b       	std	Y+20, r24	; 0x14

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     4de:	88 8d       	ldd	r24, Y+24	; 0x18
     4e0:	88 23       	and	r24, r24
     4e2:	49 f0       	breq	.+18     	; 0x4f6 <TWI_SlaveReadHandler+0x54>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     4e4:	e8 81       	ld	r30, Y
     4e6:	f9 81       	ldd	r31, Y+1	; 0x01
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	81 87       	std	Z+9, r24	; 0x09
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     4ec:	86 e0       	ldi	r24, 0x06	; 6
     4ee:	8f 8b       	std	Y+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
     4f0:	1e 8a       	std	Y+22, r1	; 0x16
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
			twi->abort = false;
     4f2:	18 8e       	std	Y+24, r1	; 0x18
     4f4:	0d c0       	rjmp	.+26     	; 0x510 <TWI_SlaveReadHandler+0x6e>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     4f6:	e8 81       	ld	r30, Y
     4f8:	f9 81       	ldd	r31, Y+1	; 0x01
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	81 87       	std	Z+9, r24	; 0x09
     4fe:	08 c0       	rjmp	.+16     	; 0x510 <TWI_SlaveReadHandler+0x6e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     500:	a0 81       	ld	r26, Z
     502:	b1 81       	ldd	r27, Z+1	; 0x01
     504:	86 e0       	ldi	r24, 0x06	; 6
     506:	19 96       	adiw	r26, 0x09	; 9
     508:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
     50e:	16 8a       	std	Z+22, r1	; 0x16
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
	}
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     516:	fc 01       	movw	r30, r24
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     518:	85 89       	ldd	r24, Z+21	; 0x15
     51a:	88 23       	and	r24, r24
     51c:	71 f0       	breq	.+28     	; 0x53a <TWI_SlaveWriteHandler+0x24>
     51e:	a0 81       	ld	r26, Z
     520:	b1 81       	ldd	r27, Z+1	; 0x01
     522:	1a 96       	adiw	r26, 0x0a	; 10
     524:	8c 91       	ld	r24, X
     526:	1a 97       	sbiw	r26, 0x0a	; 10
     528:	84 ff       	sbrs	r24, 4
     52a:	07 c0       	rjmp	.+14     	; 0x53a <TWI_SlaveWriteHandler+0x24>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	19 96       	adiw	r26, 0x09	; 9
     530:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
     536:	16 8a       	std	Z+22, r1	; 0x16
     538:	08 95       	ret
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     53a:	85 89       	ldd	r24, Z+21	; 0x15
     53c:	88 30       	cpi	r24, 0x08	; 8
     53e:	98 f4       	brcc	.+38     	; 0x566 <TWI_SlaveWriteHandler+0x50>
			uint8_t data = twi->sendData[twi->bytesSent];
     540:	85 89       	ldd	r24, Z+21	; 0x15
     542:	df 01       	movw	r26, r30
     544:	a8 0f       	add	r26, r24
     546:	b1 1d       	adc	r27, r1
     548:	1c 96       	adiw	r26, 0x0c	; 12
     54a:	8c 91       	ld	r24, X
			twi->interface->SLAVE.DATA = data;
     54c:	a0 81       	ld	r26, Z
     54e:	b1 81       	ldd	r27, Z+1	; 0x01
     550:	1c 96       	adiw	r26, 0x0c	; 12
     552:	8c 93       	st	X, r24
			twi->bytesSent++;
     554:	85 89       	ldd	r24, Z+21	; 0x15
     556:	8f 5f       	subi	r24, 0xFF	; 255
     558:	85 8b       	std	Z+21, r24	; 0x15

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     55a:	01 90       	ld	r0, Z+
     55c:	f0 81       	ld	r31, Z
     55e:	e0 2d       	mov	r30, r0
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	81 87       	std	Z+9, r24	; 0x09
     564:	08 95       	ret
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     566:	a0 81       	ld	r26, Z
     568:	b1 81       	ldd	r27, Z+1	; 0x01
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	19 96       	adiw	r26, 0x09	; 9
     56e:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     570:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
     572:	16 8a       	std	Z+22, r1	; 0x16
     574:	08 95       	ret

00000576 <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     576:	dc 01       	movw	r26, r24
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	22 85       	ldd	r18, Z+10	; 0x0a
     57e:	21 ff       	sbrs	r18, 1
		TWI_SlaveWriteHandler(twi);
     580:	02 c0       	rjmp	.+4      	; 0x586 <TWI_SlaveDataHandler+0x10>
	} else {
		TWI_SlaveReadHandler(twi);
     582:	c9 cf       	rjmp	.-110    	; 0x516 <TWI_SlaveWriteHandler>
     584:	08 95       	ret
     586:	8d cf       	rjmp	.-230    	; 0x4a2 <TWI_SlaveReadHandler>
     588:	08 95       	ret

0000058a <TWI_SlaveInterruptHandler>:
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
     58a:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     58c:	a0 81       	ld	r26, Z
     58e:	b1 81       	ldd	r27, Z+1	; 0x01
     590:	1a 96       	adiw	r26, 0x0a	; 10
     592:	8c 91       	ld	r24, X

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     594:	82 ff       	sbrs	r24, 2
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <TWI_SlaveInterruptHandler+0x1a>
		twi->bytesReceived = 0;
     598:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
     59a:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_BUS_ERROR;
     59c:	84 e0       	ldi	r24, 0x04	; 4
     59e:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
     5a0:	16 8a       	std	Z+22, r1	; 0x16
     5a2:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     5a4:	83 ff       	sbrs	r24, 3
     5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <TWI_SlaveInterruptHandler+0x2a>
		twi->bytesReceived = 0;
     5a8:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
     5aa:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
     5b0:	16 8a       	std	Z+22, r1	; 0x16
     5b2:	08 95       	ret
     5b4:	28 2f       	mov	r18, r24
     5b6:	20 74       	andi	r18, 0x40	; 64
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     5b8:	98 2f       	mov	r25, r24
     5ba:	91 74       	andi	r25, 0x41	; 65
     5bc:	91 34       	cpi	r25, 0x41	; 65
     5be:	19 f4       	brne	.+6      	; 0x5c6 <TWI_SlaveInterruptHandler+0x3c>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     5c0:	cf 01       	movw	r24, r30
     5c2:	39 cf       	rjmp	.-398    	; 0x436 <TWI_SlaveAddressMatchHandler>
     5c4:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     5c6:	22 23       	and	r18, r18
		TWI_SlaveStopHandler(twi);
     5c8:	19 f0       	breq	.+6      	; 0x5d0 <TWI_SlaveInterruptHandler+0x46>
     5ca:	cf 01       	movw	r24, r30
     5cc:	55 cf       	rjmp	.-342    	; 0x478 <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     5ce:	08 95       	ret
		TWI_SlaveDataHandler(twi);
     5d0:	88 23       	and	r24, r24
     5d2:	1c f4       	brge	.+6      	; 0x5da <TWI_SlaveInterruptHandler+0x50>
     5d4:	cf 01       	movw	r24, r30
     5d6:	cf cf       	rjmp	.-98     	; 0x576 <TWI_SlaveDataHandler>
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     5d8:	08 95       	ret
     5da:	85 e0       	ldi	r24, 0x05	; 5
	twi->status = TWIS_STATUS_READY;
     5dc:	87 8b       	std	Z+23, r24	; 0x17
     5de:	16 8a       	std	Z+22, r1	; 0x16
     5e0:	08 95       	ret

000005e2 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
     5e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     5e8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     5ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     5f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     5f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     5f8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     5fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     600:	08 95       	ret

00000602 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     60c:	9f b7       	in	r25, 0x3f	; 63
     60e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     610:	f8 94       	cli
	return flags;
     612:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     614:	e8 2f       	mov	r30, r24
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	e0 59       	subi	r30, 0x90	; 144
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	60 95       	com	r22
     61e:	80 81       	ld	r24, Z
     620:	68 23       	and	r22, r24
     622:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     624:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     626:	0f 90       	pop	r0
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	0b b6       	in	r0, 0x3b	; 59
     63a:	0f 92       	push	r0
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	4f 93       	push	r20
     642:	5f 93       	push	r21
     644:	6f 93       	push	r22
     646:	7f 93       	push	r23
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	af 93       	push	r26
     64e:	bf 93       	push	r27
     650:	ef 93       	push	r30
     652:	ff 93       	push	r31
     654:	e0 91 51 20 	lds	r30, 0x2051	; 0x802051 <tc_tcc0_ovf_callback>
     658:	f0 91 52 20 	lds	r31, 0x2052	; 0x802052 <tc_tcc0_ovf_callback+0x1>
     65c:	30 97       	sbiw	r30, 0x00	; 0
     65e:	09 f0       	breq	.+2      	; 0x662 <__vector_14+0x34>
     660:	19 95       	eicall
     662:	ff 91       	pop	r31
     664:	ef 91       	pop	r30
     666:	bf 91       	pop	r27
     668:	af 91       	pop	r26
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	7f 91       	pop	r23
     670:	6f 91       	pop	r22
     672:	5f 91       	pop	r21
     674:	4f 91       	pop	r20
     676:	3f 91       	pop	r19
     678:	2f 91       	pop	r18
     67a:	0f 90       	pop	r0
     67c:	0b be       	out	0x3b, r0	; 59
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <__vector_15>:
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	0b b6       	in	r0, 0x3b	; 59
     694:	0f 92       	push	r0
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	e0 91 4f 20 	lds	r30, 0x204F	; 0x80204f <tc_tcc0_err_callback>
     6b2:	f0 91 50 20 	lds	r31, 0x2050	; 0x802050 <tc_tcc0_err_callback+0x1>
     6b6:	30 97       	sbiw	r30, 0x00	; 0
     6b8:	09 f0       	breq	.+2      	; 0x6bc <__vector_15+0x34>
     6ba:	19 95       	eicall
     6bc:	ff 91       	pop	r31
     6be:	ef 91       	pop	r30
     6c0:	bf 91       	pop	r27
     6c2:	af 91       	pop	r26
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	7f 91       	pop	r23
     6ca:	6f 91       	pop	r22
     6cc:	5f 91       	pop	r21
     6ce:	4f 91       	pop	r20
     6d0:	3f 91       	pop	r19
     6d2:	2f 91       	pop	r18
     6d4:	0f 90       	pop	r0
     6d6:	0b be       	out	0x3b, r0	; 59
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <__vector_16>:
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	0b b6       	in	r0, 0x3b	; 59
     6ee:	0f 92       	push	r0
     6f0:	2f 93       	push	r18
     6f2:	3f 93       	push	r19
     6f4:	4f 93       	push	r20
     6f6:	5f 93       	push	r21
     6f8:	6f 93       	push	r22
     6fa:	7f 93       	push	r23
     6fc:	8f 93       	push	r24
     6fe:	9f 93       	push	r25
     700:	af 93       	push	r26
     702:	bf 93       	push	r27
     704:	ef 93       	push	r30
     706:	ff 93       	push	r31
     708:	e0 91 4d 20 	lds	r30, 0x204D	; 0x80204d <tc_tcc0_cca_callback>
     70c:	f0 91 4e 20 	lds	r31, 0x204E	; 0x80204e <tc_tcc0_cca_callback+0x1>
     710:	30 97       	sbiw	r30, 0x00	; 0
     712:	09 f0       	breq	.+2      	; 0x716 <__vector_16+0x34>
     714:	19 95       	eicall
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	bf 91       	pop	r27
     71c:	af 91       	pop	r26
     71e:	9f 91       	pop	r25
     720:	8f 91       	pop	r24
     722:	7f 91       	pop	r23
     724:	6f 91       	pop	r22
     726:	5f 91       	pop	r21
     728:	4f 91       	pop	r20
     72a:	3f 91       	pop	r19
     72c:	2f 91       	pop	r18
     72e:	0f 90       	pop	r0
     730:	0b be       	out	0x3b, r0	; 59
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <__vector_17>:
     73c:	1f 92       	push	r1
     73e:	0f 92       	push	r0
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	0f 92       	push	r0
     744:	11 24       	eor	r1, r1
     746:	0b b6       	in	r0, 0x3b	; 59
     748:	0f 92       	push	r0
     74a:	2f 93       	push	r18
     74c:	3f 93       	push	r19
     74e:	4f 93       	push	r20
     750:	5f 93       	push	r21
     752:	6f 93       	push	r22
     754:	7f 93       	push	r23
     756:	8f 93       	push	r24
     758:	9f 93       	push	r25
     75a:	af 93       	push	r26
     75c:	bf 93       	push	r27
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
     762:	e0 91 4b 20 	lds	r30, 0x204B	; 0x80204b <tc_tcc0_ccb_callback>
     766:	f0 91 4c 20 	lds	r31, 0x204C	; 0x80204c <tc_tcc0_ccb_callback+0x1>
     76a:	30 97       	sbiw	r30, 0x00	; 0
     76c:	09 f0       	breq	.+2      	; 0x770 <__vector_17+0x34>
     76e:	19 95       	eicall
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0b be       	out	0x3b, r0	; 59
     78c:	0f 90       	pop	r0
     78e:	0f be       	out	0x3f, r0	; 63
     790:	0f 90       	pop	r0
     792:	1f 90       	pop	r1
     794:	18 95       	reti

00000796 <__vector_18>:
     796:	1f 92       	push	r1
     798:	0f 92       	push	r0
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	0f 92       	push	r0
     79e:	11 24       	eor	r1, r1
     7a0:	0b b6       	in	r0, 0x3b	; 59
     7a2:	0f 92       	push	r0
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	ef 93       	push	r30
     7ba:	ff 93       	push	r31
     7bc:	e0 91 49 20 	lds	r30, 0x2049	; 0x802049 <tc_tcc0_ccc_callback>
     7c0:	f0 91 4a 20 	lds	r31, 0x204A	; 0x80204a <tc_tcc0_ccc_callback+0x1>
     7c4:	30 97       	sbiw	r30, 0x00	; 0
     7c6:	09 f0       	breq	.+2      	; 0x7ca <__vector_18+0x34>
     7c8:	19 95       	eicall
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	0b be       	out	0x3b, r0	; 59
     7e6:	0f 90       	pop	r0
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	0f 90       	pop	r0
     7ec:	1f 90       	pop	r1
     7ee:	18 95       	reti

000007f0 <__vector_19>:
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	0b b6       	in	r0, 0x3b	; 59
     7fc:	0f 92       	push	r0
     7fe:	2f 93       	push	r18
     800:	3f 93       	push	r19
     802:	4f 93       	push	r20
     804:	5f 93       	push	r21
     806:	6f 93       	push	r22
     808:	7f 93       	push	r23
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	af 93       	push	r26
     810:	bf 93       	push	r27
     812:	ef 93       	push	r30
     814:	ff 93       	push	r31
     816:	e0 91 47 20 	lds	r30, 0x2047	; 0x802047 <tc_tcc0_ccd_callback>
     81a:	f0 91 48 20 	lds	r31, 0x2048	; 0x802048 <tc_tcc0_ccd_callback+0x1>
     81e:	30 97       	sbiw	r30, 0x00	; 0
     820:	09 f0       	breq	.+2      	; 0x824 <__vector_19+0x34>
     822:	19 95       	eicall
     824:	ff 91       	pop	r31
     826:	ef 91       	pop	r30
     828:	bf 91       	pop	r27
     82a:	af 91       	pop	r26
     82c:	9f 91       	pop	r25
     82e:	8f 91       	pop	r24
     830:	7f 91       	pop	r23
     832:	6f 91       	pop	r22
     834:	5f 91       	pop	r21
     836:	4f 91       	pop	r20
     838:	3f 91       	pop	r19
     83a:	2f 91       	pop	r18
     83c:	0f 90       	pop	r0
     83e:	0b be       	out	0x3b, r0	; 59
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti

0000084a <__vector_20>:
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	0b b6       	in	r0, 0x3b	; 59
     856:	0f 92       	push	r0
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	e0 91 45 20 	lds	r30, 0x2045	; 0x802045 <tc_tcc1_ovf_callback>
     874:	f0 91 46 20 	lds	r31, 0x2046	; 0x802046 <tc_tcc1_ovf_callback+0x1>
     878:	30 97       	sbiw	r30, 0x00	; 0
     87a:	09 f0       	breq	.+2      	; 0x87e <__vector_20+0x34>
     87c:	19 95       	eicall
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0b be       	out	0x3b, r0	; 59
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <__vector_21>:
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	0f 92       	push	r0
     8ac:	11 24       	eor	r1, r1
     8ae:	0b b6       	in	r0, 0x3b	; 59
     8b0:	0f 92       	push	r0
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
     8ca:	e0 91 43 20 	lds	r30, 0x2043	; 0x802043 <tc_tcc1_err_callback>
     8ce:	f0 91 44 20 	lds	r31, 0x2044	; 0x802044 <tc_tcc1_err_callback+0x1>
     8d2:	30 97       	sbiw	r30, 0x00	; 0
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <__vector_21+0x34>
     8d6:	19 95       	eicall
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0b be       	out	0x3b, r0	; 59
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_22>:
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	0b b6       	in	r0, 0x3b	; 59
     90a:	0f 92       	push	r0
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
     924:	e0 91 41 20 	lds	r30, 0x2041	; 0x802041 <tc_tcc1_cca_callback>
     928:	f0 91 42 20 	lds	r31, 0x2042	; 0x802042 <tc_tcc1_cca_callback+0x1>
     92c:	30 97       	sbiw	r30, 0x00	; 0
     92e:	09 f0       	breq	.+2      	; 0x932 <__vector_22+0x34>
     930:	19 95       	eicall
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0b be       	out	0x3b, r0	; 59
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_23>:
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	0b b6       	in	r0, 0x3b	; 59
     964:	0f 92       	push	r0
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
     97e:	e0 91 3f 20 	lds	r30, 0x203F	; 0x80203f <tc_tcc1_ccb_callback>
     982:	f0 91 40 20 	lds	r31, 0x2040	; 0x802040 <tc_tcc1_ccb_callback+0x1>
     986:	30 97       	sbiw	r30, 0x00	; 0
     988:	09 f0       	breq	.+2      	; 0x98c <__vector_23+0x34>
     98a:	19 95       	eicall
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0b be       	out	0x3b, r0	; 59
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_77>:
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
     9bc:	0b b6       	in	r0, 0x3b	; 59
     9be:	0f 92       	push	r0
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
     9d8:	e0 91 3d 20 	lds	r30, 0x203D	; 0x80203d <tc_tcd0_ovf_callback>
     9dc:	f0 91 3e 20 	lds	r31, 0x203E	; 0x80203e <tc_tcd0_ovf_callback+0x1>
     9e0:	30 97       	sbiw	r30, 0x00	; 0
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <__vector_77+0x34>
     9e4:	19 95       	eicall
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0b be       	out	0x3b, r0	; 59
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_78>:
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	0b b6       	in	r0, 0x3b	; 59
     a18:	0f 92       	push	r0
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
     a32:	e0 91 3b 20 	lds	r30, 0x203B	; 0x80203b <tc_tcd0_err_callback>
     a36:	f0 91 3c 20 	lds	r31, 0x203C	; 0x80203c <tc_tcd0_err_callback+0x1>
     a3a:	30 97       	sbiw	r30, 0x00	; 0
     a3c:	09 f0       	breq	.+2      	; 0xa40 <__vector_78+0x34>
     a3e:	19 95       	eicall
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	0f 90       	pop	r0
     a5a:	0b be       	out	0x3b, r0	; 59
     a5c:	0f 90       	pop	r0
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	0f 90       	pop	r0
     a62:	1f 90       	pop	r1
     a64:	18 95       	reti

00000a66 <__vector_79>:
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1
     a70:	0b b6       	in	r0, 0x3b	; 59
     a72:	0f 92       	push	r0
     a74:	2f 93       	push	r18
     a76:	3f 93       	push	r19
     a78:	4f 93       	push	r20
     a7a:	5f 93       	push	r21
     a7c:	6f 93       	push	r22
     a7e:	7f 93       	push	r23
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	af 93       	push	r26
     a86:	bf 93       	push	r27
     a88:	ef 93       	push	r30
     a8a:	ff 93       	push	r31
     a8c:	e0 91 39 20 	lds	r30, 0x2039	; 0x802039 <tc_tcd0_cca_callback>
     a90:	f0 91 3a 20 	lds	r31, 0x203A	; 0x80203a <tc_tcd0_cca_callback+0x1>
     a94:	30 97       	sbiw	r30, 0x00	; 0
     a96:	09 f0       	breq	.+2      	; 0xa9a <__vector_79+0x34>
     a98:	19 95       	eicall
     a9a:	ff 91       	pop	r31
     a9c:	ef 91       	pop	r30
     a9e:	bf 91       	pop	r27
     aa0:	af 91       	pop	r26
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	7f 91       	pop	r23
     aa8:	6f 91       	pop	r22
     aaa:	5f 91       	pop	r21
     aac:	4f 91       	pop	r20
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	0b be       	out	0x3b, r0	; 59
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <__vector_80>:
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	0b b6       	in	r0, 0x3b	; 59
     acc:	0f 92       	push	r0
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	4f 93       	push	r20
     ad4:	5f 93       	push	r21
     ad6:	6f 93       	push	r22
     ad8:	7f 93       	push	r23
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	af 93       	push	r26
     ae0:	bf 93       	push	r27
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
     ae6:	e0 91 37 20 	lds	r30, 0x2037	; 0x802037 <tc_tcd0_ccb_callback>
     aea:	f0 91 38 20 	lds	r31, 0x2038	; 0x802038 <tc_tcd0_ccb_callback+0x1>
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	09 f0       	breq	.+2      	; 0xaf4 <__vector_80+0x34>
     af2:	19 95       	eicall
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_81>:
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	0b b6       	in	r0, 0x3b	; 59
     b26:	0f 92       	push	r0
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
     b40:	e0 91 35 20 	lds	r30, 0x2035	; 0x802035 <tc_tcd0_ccc_callback>
     b44:	f0 91 36 20 	lds	r31, 0x2036	; 0x802036 <tc_tcd0_ccc_callback+0x1>
     b48:	30 97       	sbiw	r30, 0x00	; 0
     b4a:	09 f0       	breq	.+2      	; 0xb4e <__vector_81+0x34>
     b4c:	19 95       	eicall
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	7f 91       	pop	r23
     b5c:	6f 91       	pop	r22
     b5e:	5f 91       	pop	r21
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0b be       	out	0x3b, r0	; 59
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <__vector_82>:
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	0b b6       	in	r0, 0x3b	; 59
     b80:	0f 92       	push	r0
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
     b9a:	e0 91 33 20 	lds	r30, 0x2033	; 0x802033 <tc_tcd0_ccd_callback>
     b9e:	f0 91 34 20 	lds	r31, 0x2034	; 0x802034 <tc_tcd0_ccd_callback+0x1>
     ba2:	30 97       	sbiw	r30, 0x00	; 0
     ba4:	09 f0       	breq	.+2      	; 0xba8 <__vector_82+0x34>
     ba6:	19 95       	eicall
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0b be       	out	0x3b, r0	; 59
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <__vector_83>:
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	0b b6       	in	r0, 0x3b	; 59
     bda:	0f 92       	push	r0
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
     bf4:	e0 91 31 20 	lds	r30, 0x2031	; 0x802031 <tc_tcd1_ovf_callback>
     bf8:	f0 91 32 20 	lds	r31, 0x2032	; 0x802032 <tc_tcd1_ovf_callback+0x1>
     bfc:	30 97       	sbiw	r30, 0x00	; 0
     bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_83+0x34>
     c00:	19 95       	eicall
     c02:	ff 91       	pop	r31
     c04:	ef 91       	pop	r30
     c06:	bf 91       	pop	r27
     c08:	af 91       	pop	r26
     c0a:	9f 91       	pop	r25
     c0c:	8f 91       	pop	r24
     c0e:	7f 91       	pop	r23
     c10:	6f 91       	pop	r22
     c12:	5f 91       	pop	r21
     c14:	4f 91       	pop	r20
     c16:	3f 91       	pop	r19
     c18:	2f 91       	pop	r18
     c1a:	0f 90       	pop	r0
     c1c:	0b be       	out	0x3b, r0	; 59
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_84>:
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	0b b6       	in	r0, 0x3b	; 59
     c34:	0f 92       	push	r0
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
     c4e:	e0 91 2f 20 	lds	r30, 0x202F	; 0x80202f <tc_tcd1_err_callback>
     c52:	f0 91 30 20 	lds	r31, 0x2030	; 0x802030 <tc_tcd1_err_callback+0x1>
     c56:	30 97       	sbiw	r30, 0x00	; 0
     c58:	09 f0       	breq	.+2      	; 0xc5c <__vector_84+0x34>
     c5a:	19 95       	eicall
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_85>:
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	0b b6       	in	r0, 0x3b	; 59
     c8e:	0f 92       	push	r0
     c90:	2f 93       	push	r18
     c92:	3f 93       	push	r19
     c94:	4f 93       	push	r20
     c96:	5f 93       	push	r21
     c98:	6f 93       	push	r22
     c9a:	7f 93       	push	r23
     c9c:	8f 93       	push	r24
     c9e:	9f 93       	push	r25
     ca0:	af 93       	push	r26
     ca2:	bf 93       	push	r27
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
     ca8:	e0 91 2d 20 	lds	r30, 0x202D	; 0x80202d <tc_tcd1_cca_callback>
     cac:	f0 91 2e 20 	lds	r31, 0x202E	; 0x80202e <tc_tcd1_cca_callback+0x1>
     cb0:	30 97       	sbiw	r30, 0x00	; 0
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <__vector_85+0x34>
     cb4:	19 95       	eicall
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0b be       	out	0x3b, r0	; 59
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__vector_86>:
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	0b b6       	in	r0, 0x3b	; 59
     ce8:	0f 92       	push	r0
     cea:	2f 93       	push	r18
     cec:	3f 93       	push	r19
     cee:	4f 93       	push	r20
     cf0:	5f 93       	push	r21
     cf2:	6f 93       	push	r22
     cf4:	7f 93       	push	r23
     cf6:	8f 93       	push	r24
     cf8:	9f 93       	push	r25
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
     d02:	e0 91 2b 20 	lds	r30, 0x202B	; 0x80202b <tc_tcd1_ccb_callback>
     d06:	f0 91 2c 20 	lds	r31, 0x202C	; 0x80202c <tc_tcd1_ccb_callback+0x1>
     d0a:	30 97       	sbiw	r30, 0x00	; 0
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__vector_86+0x34>
     d0e:	19 95       	eicall
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0b be       	out	0x3b, r0	; 59
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	0f 90       	pop	r0
     d32:	1f 90       	pop	r1
     d34:	18 95       	reti

00000d36 <__vector_47>:
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	0b b6       	in	r0, 0x3b	; 59
     d42:	0f 92       	push	r0
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	5f 93       	push	r21
     d4c:	6f 93       	push	r22
     d4e:	7f 93       	push	r23
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
     d5c:	e0 91 29 20 	lds	r30, 0x2029	; 0x802029 <tc_tce0_ovf_callback>
     d60:	f0 91 2a 20 	lds	r31, 0x202A	; 0x80202a <tc_tce0_ovf_callback+0x1>
     d64:	30 97       	sbiw	r30, 0x00	; 0
     d66:	09 f0       	breq	.+2      	; 0xd6a <__vector_47+0x34>
     d68:	19 95       	eicall
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0b be       	out	0x3b, r0	; 59
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <__vector_48>:
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	0b b6       	in	r0, 0x3b	; 59
     d9c:	0f 92       	push	r0
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
     db6:	e0 91 27 20 	lds	r30, 0x2027	; 0x802027 <tc_tce0_err_callback>
     dba:	f0 91 28 20 	lds	r31, 0x2028	; 0x802028 <tc_tce0_err_callback+0x1>
     dbe:	30 97       	sbiw	r30, 0x00	; 0
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <__vector_48+0x34>
     dc2:	19 95       	eicall
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0b be       	out	0x3b, r0	; 59
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_49>:
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	0b b6       	in	r0, 0x3b	; 59
     df6:	0f 92       	push	r0
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
     e10:	e0 91 25 20 	lds	r30, 0x2025	; 0x802025 <tc_tce0_cca_callback>
     e14:	f0 91 26 20 	lds	r31, 0x2026	; 0x802026 <tc_tce0_cca_callback+0x1>
     e18:	30 97       	sbiw	r30, 0x00	; 0
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__vector_49+0x34>
     e1c:	19 95       	eicall
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0b be       	out	0x3b, r0	; 59
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_50>:
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	0b b6       	in	r0, 0x3b	; 59
     e50:	0f 92       	push	r0
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	e0 91 23 20 	lds	r30, 0x2023	; 0x802023 <tc_tce0_ccb_callback>
     e6e:	f0 91 24 20 	lds	r31, 0x2024	; 0x802024 <tc_tce0_ccb_callback+0x1>
     e72:	30 97       	sbiw	r30, 0x00	; 0
     e74:	09 f0       	breq	.+2      	; 0xe78 <__vector_50+0x34>
     e76:	19 95       	eicall
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0b be       	out	0x3b, r0	; 59
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <__vector_51>:
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	0b b6       	in	r0, 0x3b	; 59
     eaa:	0f 92       	push	r0
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <tc_tce0_ccc_callback>
     ec8:	f0 91 22 20 	lds	r31, 0x2022	; 0x802022 <tc_tce0_ccc_callback+0x1>
     ecc:	30 97       	sbiw	r30, 0x00	; 0
     ece:	09 f0       	breq	.+2      	; 0xed2 <__vector_51+0x34>
     ed0:	19 95       	eicall
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0b be       	out	0x3b, r0	; 59
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_52>:
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	0b b6       	in	r0, 0x3b	; 59
     f04:	0f 92       	push	r0
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	e0 91 1f 20 	lds	r30, 0x201F	; 0x80201f <tc_tce0_ccd_callback>
     f22:	f0 91 20 20 	lds	r31, 0x2020	; 0x802020 <tc_tce0_ccd_callback+0x1>
     f26:	30 97       	sbiw	r30, 0x00	; 0
     f28:	09 f0       	breq	.+2      	; 0xf2c <__vector_52+0x34>
     f2a:	19 95       	eicall
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0b be       	out	0x3b, r0	; 59
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_53>:
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	0b b6       	in	r0, 0x3b	; 59
     f5e:	0f 92       	push	r0
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	e0 91 1d 20 	lds	r30, 0x201D	; 0x80201d <tc_tce1_ovf_callback>
     f7c:	f0 91 1e 20 	lds	r31, 0x201E	; 0x80201e <tc_tce1_ovf_callback+0x1>
     f80:	30 97       	sbiw	r30, 0x00	; 0
     f82:	09 f0       	breq	.+2      	; 0xf86 <__vector_53+0x34>
     f84:	19 95       	eicall
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	bf 91       	pop	r27
     f8c:	af 91       	pop	r26
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	7f 91       	pop	r23
     f94:	6f 91       	pop	r22
     f96:	5f 91       	pop	r21
     f98:	4f 91       	pop	r20
     f9a:	3f 91       	pop	r19
     f9c:	2f 91       	pop	r18
     f9e:	0f 90       	pop	r0
     fa0:	0b be       	out	0x3b, r0	; 59
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_54>:
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	0b b6       	in	r0, 0x3b	; 59
     fb8:	0f 92       	push	r0
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
     fd2:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <tc_tce1_err_callback>
     fd6:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <tc_tce1_err_callback+0x1>
     fda:	30 97       	sbiw	r30, 0x00	; 0
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <__vector_54+0x34>
     fde:	19 95       	eicall
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0b be       	out	0x3b, r0	; 59
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_55>:
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	0b b6       	in	r0, 0x3b	; 59
    1012:	0f 92       	push	r0
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
    102c:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <tc_tce1_cca_callback>
    1030:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <tc_tce1_cca_callback+0x1>
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	09 f0       	breq	.+2      	; 0x103a <__vector_55+0x34>
    1038:	19 95       	eicall
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0b be       	out	0x3b, r0	; 59
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <__vector_56>:
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
    106a:	0b b6       	in	r0, 0x3b	; 59
    106c:	0f 92       	push	r0
    106e:	2f 93       	push	r18
    1070:	3f 93       	push	r19
    1072:	4f 93       	push	r20
    1074:	5f 93       	push	r21
    1076:	6f 93       	push	r22
    1078:	7f 93       	push	r23
    107a:	8f 93       	push	r24
    107c:	9f 93       	push	r25
    107e:	af 93       	push	r26
    1080:	bf 93       	push	r27
    1082:	ef 93       	push	r30
    1084:	ff 93       	push	r31
    1086:	e0 91 17 20 	lds	r30, 0x2017	; 0x802017 <tc_tce1_ccb_callback>
    108a:	f0 91 18 20 	lds	r31, 0x2018	; 0x802018 <tc_tce1_ccb_callback+0x1>
    108e:	30 97       	sbiw	r30, 0x00	; 0
    1090:	09 f0       	breq	.+2      	; 0x1094 <__vector_56+0x34>
    1092:	19 95       	eicall
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0b be       	out	0x3b, r0	; 59
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <__vector_108>:
    10ba:	1f 92       	push	r1
    10bc:	0f 92       	push	r0
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	0f 92       	push	r0
    10c2:	11 24       	eor	r1, r1
    10c4:	0b b6       	in	r0, 0x3b	; 59
    10c6:	0f 92       	push	r0
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	4f 93       	push	r20
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    10dc:	ef 93       	push	r30
    10de:	ff 93       	push	r31
    10e0:	e0 91 15 20 	lds	r30, 0x2015	; 0x802015 <tc_tcf0_ovf_callback>
    10e4:	f0 91 16 20 	lds	r31, 0x2016	; 0x802016 <tc_tcf0_ovf_callback+0x1>
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	09 f0       	breq	.+2      	; 0x10ee <__vector_108+0x34>
    10ec:	19 95       	eicall
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	6f 91       	pop	r22
    10fe:	5f 91       	pop	r21
    1100:	4f 91       	pop	r20
    1102:	3f 91       	pop	r19
    1104:	2f 91       	pop	r18
    1106:	0f 90       	pop	r0
    1108:	0b be       	out	0x3b, r0	; 59
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <__vector_109>:
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	0b b6       	in	r0, 0x3b	; 59
    1120:	0f 92       	push	r0
    1122:	2f 93       	push	r18
    1124:	3f 93       	push	r19
    1126:	4f 93       	push	r20
    1128:	5f 93       	push	r21
    112a:	6f 93       	push	r22
    112c:	7f 93       	push	r23
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
    113a:	e0 91 13 20 	lds	r30, 0x2013	; 0x802013 <tc_tcf0_err_callback>
    113e:	f0 91 14 20 	lds	r31, 0x2014	; 0x802014 <tc_tcf0_err_callback+0x1>
    1142:	30 97       	sbiw	r30, 0x00	; 0
    1144:	09 f0       	breq	.+2      	; 0x1148 <__vector_109+0x34>
    1146:	19 95       	eicall
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0b be       	out	0x3b, r0	; 59
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_110>:
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	0b b6       	in	r0, 0x3b	; 59
    117a:	0f 92       	push	r0
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
    1194:	e0 91 11 20 	lds	r30, 0x2011	; 0x802011 <tc_tcf0_cca_callback>
    1198:	f0 91 12 20 	lds	r31, 0x2012	; 0x802012 <tc_tcf0_cca_callback+0x1>
    119c:	30 97       	sbiw	r30, 0x00	; 0
    119e:	09 f0       	breq	.+2      	; 0x11a2 <__vector_110+0x34>
    11a0:	19 95       	eicall
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0b be       	out	0x3b, r0	; 59
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <__vector_111>:
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	0b b6       	in	r0, 0x3b	; 59
    11d4:	0f 92       	push	r0
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
    11ee:	e0 91 0f 20 	lds	r30, 0x200F	; 0x80200f <tc_tcf0_ccb_callback>
    11f2:	f0 91 10 20 	lds	r31, 0x2010	; 0x802010 <tc_tcf0_ccb_callback+0x1>
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__vector_111+0x34>
    11fa:	19 95       	eicall
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0b be       	out	0x3b, r0	; 59
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <__vector_112>:
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	0b b6       	in	r0, 0x3b	; 59
    122e:	0f 92       	push	r0
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	4f 93       	push	r20
    1236:	5f 93       	push	r21
    1238:	6f 93       	push	r22
    123a:	7f 93       	push	r23
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	af 93       	push	r26
    1242:	bf 93       	push	r27
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
    1248:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <tc_tcf0_ccc_callback>
    124c:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <tc_tcf0_ccc_callback+0x1>
    1250:	30 97       	sbiw	r30, 0x00	; 0
    1252:	09 f0       	breq	.+2      	; 0x1256 <__vector_112+0x34>
    1254:	19 95       	eicall
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0b be       	out	0x3b, r0	; 59
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_113>:
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	0b b6       	in	r0, 0x3b	; 59
    1288:	0f 92       	push	r0
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	4f 93       	push	r20
    1290:	5f 93       	push	r21
    1292:	6f 93       	push	r22
    1294:	7f 93       	push	r23
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
    12a2:	e0 91 0b 20 	lds	r30, 0x200B	; 0x80200b <tc_tcf0_ccd_callback>
    12a6:	f0 91 0c 20 	lds	r31, 0x200C	; 0x80200c <tc_tcf0_ccd_callback+0x1>
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <__vector_113+0x34>
    12ae:	19 95       	eicall
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0b be       	out	0x3b, r0	; 59
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <tc_enable>:
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	1f 92       	push	r1
    12de:	1f 92       	push	r1
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	2f b7       	in	r18, 0x3f	; 63
    12e6:	2a 83       	std	Y+2, r18	; 0x02
    12e8:	f8 94       	cli
    12ea:	1a 81       	ldd	r17, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	39 2f       	mov	r19, r25
    12f0:	21 15       	cp	r18, r1
    12f2:	88 e0       	ldi	r24, 0x08	; 8
    12f4:	38 07       	cpc	r19, r24
    12f6:	39 f4       	brne	.+14     	; 0x1306 <tc_enable+0x30>
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	82 d9       	rcall	.-3324   	; 0x602 <sysclk_enable_module>
    12fe:	64 e0       	ldi	r22, 0x04	; 4
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	7f d9       	rcall	.-3330   	; 0x602 <sysclk_enable_module>
    1304:	43 c0       	rjmp	.+134    	; 0x138c <tc_enable+0xb6>
    1306:	20 34       	cpi	r18, 0x40	; 64
    1308:	88 e0       	ldi	r24, 0x08	; 8
    130a:	38 07       	cpc	r19, r24
    130c:	39 f4       	brne	.+14     	; 0x131c <tc_enable+0x46>
    130e:	62 e0       	ldi	r22, 0x02	; 2
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	77 d9       	rcall	.-3346   	; 0x602 <sysclk_enable_module>
    1314:	64 e0       	ldi	r22, 0x04	; 4
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	74 d9       	rcall	.-3352   	; 0x602 <sysclk_enable_module>
    131a:	38 c0       	rjmp	.+112    	; 0x138c <tc_enable+0xb6>
    131c:	21 15       	cp	r18, r1
    131e:	89 e0       	ldi	r24, 0x09	; 9
    1320:	38 07       	cpc	r19, r24
    1322:	39 f4       	brne	.+14     	; 0x1332 <tc_enable+0x5c>
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	84 e0       	ldi	r24, 0x04	; 4
    1328:	6c d9       	rcall	.-3368   	; 0x602 <sysclk_enable_module>
    132a:	64 e0       	ldi	r22, 0x04	; 4
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	69 d9       	rcall	.-3374   	; 0x602 <sysclk_enable_module>
    1330:	2d c0       	rjmp	.+90     	; 0x138c <tc_enable+0xb6>
    1332:	20 34       	cpi	r18, 0x40	; 64
    1334:	89 e0       	ldi	r24, 0x09	; 9
    1336:	38 07       	cpc	r19, r24
    1338:	39 f4       	brne	.+14     	; 0x1348 <tc_enable+0x72>
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	61 d9       	rcall	.-3390   	; 0x602 <sysclk_enable_module>
    1340:	64 e0       	ldi	r22, 0x04	; 4
    1342:	84 e0       	ldi	r24, 0x04	; 4
    1344:	5e d9       	rcall	.-3396   	; 0x602 <sysclk_enable_module>
    1346:	22 c0       	rjmp	.+68     	; 0x138c <tc_enable+0xb6>
    1348:	21 15       	cp	r18, r1
    134a:	8a e0       	ldi	r24, 0x0A	; 10
    134c:	38 07       	cpc	r19, r24
    134e:	39 f4       	brne	.+14     	; 0x135e <tc_enable+0x88>
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	85 e0       	ldi	r24, 0x05	; 5
    1354:	56 d9       	rcall	.-3412   	; 0x602 <sysclk_enable_module>
    1356:	64 e0       	ldi	r22, 0x04	; 4
    1358:	85 e0       	ldi	r24, 0x05	; 5
    135a:	53 d9       	rcall	.-3418   	; 0x602 <sysclk_enable_module>
    135c:	17 c0       	rjmp	.+46     	; 0x138c <tc_enable+0xb6>
    135e:	20 34       	cpi	r18, 0x40	; 64
    1360:	8a e0       	ldi	r24, 0x0A	; 10
    1362:	38 07       	cpc	r19, r24
    1364:	39 f4       	brne	.+14     	; 0x1374 <tc_enable+0x9e>
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	85 e0       	ldi	r24, 0x05	; 5
    136a:	4b d9       	rcall	.-3434   	; 0x602 <sysclk_enable_module>
    136c:	64 e0       	ldi	r22, 0x04	; 4
    136e:	85 e0       	ldi	r24, 0x05	; 5
    1370:	48 d9       	rcall	.-3440   	; 0x602 <sysclk_enable_module>
    1372:	0c c0       	rjmp	.+24     	; 0x138c <tc_enable+0xb6>
    1374:	21 15       	cp	r18, r1
    1376:	3b 40       	sbci	r19, 0x0B	; 11
    1378:	39 f4       	brne	.+14     	; 0x1388 <tc_enable+0xb2>
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	86 e0       	ldi	r24, 0x06	; 6
    137e:	41 d9       	rcall	.-3454   	; 0x602 <sysclk_enable_module>
    1380:	64 e0       	ldi	r22, 0x04	; 4
    1382:	86 e0       	ldi	r24, 0x06	; 6
    1384:	3e d9       	rcall	.-3460   	; 0x602 <sysclk_enable_module>
    1386:	02 c0       	rjmp	.+4      	; 0x138c <tc_enable+0xb6>
    1388:	1f bf       	out	0x3f, r17	; 63
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <tc_enable+0xd6>
    138c:	80 91 55 20 	lds	r24, 0x2055	; 0x802055 <sleepmgr_locks+0x1>
    1390:	8f 3f       	cpi	r24, 0xFF	; 255
    1392:	09 f4       	brne	.+2      	; 0x1396 <tc_enable+0xc0>
    1394:	ff cf       	rjmp	.-2      	; 0x1394 <tc_enable+0xbe>
    1396:	8f b7       	in	r24, 0x3f	; 63
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	f8 94       	cli
    139c:	99 81       	ldd	r25, Y+1	; 0x01
    139e:	e4 e5       	ldi	r30, 0x54	; 84
    13a0:	f0 e2       	ldi	r31, 0x20	; 32
    13a2:	81 81       	ldd	r24, Z+1	; 0x01
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	81 83       	std	Z+1, r24	; 0x01
    13a8:	9f bf       	out	0x3f, r25	; 63
    13aa:	1f bf       	out	0x3f, r17	; 63
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	08 95       	ret

000013b8 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    13b8:	81 15       	cp	r24, r1
    13ba:	28 e0       	ldi	r18, 0x08	; 8
    13bc:	92 07       	cpc	r25, r18
    13be:	29 f4       	brne	.+10     	; 0x13ca <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    13c0:	60 93 51 20 	sts	0x2051, r22	; 0x802051 <tc_tcc0_ovf_callback>
    13c4:	70 93 52 20 	sts	0x2052, r23	; 0x802052 <tc_tcc0_ovf_callback+0x1>
    13c8:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    13ca:	80 34       	cpi	r24, 0x40	; 64
    13cc:	28 e0       	ldi	r18, 0x08	; 8
    13ce:	92 07       	cpc	r25, r18
    13d0:	29 f4       	brne	.+10     	; 0x13dc <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    13d2:	60 93 45 20 	sts	0x2045, r22	; 0x802045 <tc_tcc1_ovf_callback>
    13d6:	70 93 46 20 	sts	0x2046, r23	; 0x802046 <tc_tcc1_ovf_callback+0x1>
    13da:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    13dc:	81 15       	cp	r24, r1
    13de:	29 e0       	ldi	r18, 0x09	; 9
    13e0:	92 07       	cpc	r25, r18
    13e2:	29 f4       	brne	.+10     	; 0x13ee <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    13e4:	60 93 3d 20 	sts	0x203D, r22	; 0x80203d <tc_tcd0_ovf_callback>
    13e8:	70 93 3e 20 	sts	0x203E, r23	; 0x80203e <tc_tcd0_ovf_callback+0x1>
    13ec:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    13ee:	80 34       	cpi	r24, 0x40	; 64
    13f0:	29 e0       	ldi	r18, 0x09	; 9
    13f2:	92 07       	cpc	r25, r18
    13f4:	29 f4       	brne	.+10     	; 0x1400 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    13f6:	60 93 31 20 	sts	0x2031, r22	; 0x802031 <tc_tcd1_ovf_callback>
    13fa:	70 93 32 20 	sts	0x2032, r23	; 0x802032 <tc_tcd1_ovf_callback+0x1>
    13fe:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1400:	81 15       	cp	r24, r1
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	92 07       	cpc	r25, r18
    1406:	29 f4       	brne	.+10     	; 0x1412 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1408:	60 93 29 20 	sts	0x2029, r22	; 0x802029 <tc_tce0_ovf_callback>
    140c:	70 93 2a 20 	sts	0x202A, r23	; 0x80202a <tc_tce0_ovf_callback+0x1>
    1410:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1412:	80 34       	cpi	r24, 0x40	; 64
    1414:	2a e0       	ldi	r18, 0x0A	; 10
    1416:	92 07       	cpc	r25, r18
    1418:	29 f4       	brne	.+10     	; 0x1424 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    141a:	60 93 1d 20 	sts	0x201D, r22	; 0x80201d <tc_tce1_ovf_callback>
    141e:	70 93 1e 20 	sts	0x201E, r23	; 0x80201e <tc_tce1_ovf_callback+0x1>
    1422:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1424:	81 15       	cp	r24, r1
    1426:	9b 40       	sbci	r25, 0x0B	; 11
    1428:	21 f4       	brne	.+8      	; 0x1432 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    142a:	60 93 15 20 	sts	0x2015, r22	; 0x802015 <tc_tcf0_ovf_callback>
    142e:	70 93 16 20 	sts	0x2016, r23	; 0x802016 <tc_tcf0_ovf_callback+0x1>
    1432:	08 95       	ret

00001434 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    143e:	c6 2f       	mov	r28, r22
    1440:	d0 e0       	ldi	r29, 0x00	; 0
    1442:	de 01       	movw	r26, r28
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <ioport_configure_port_pin+0x18>
    1448:	b5 95       	asr	r27
    144a:	a7 95       	ror	r26
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <ioport_configure_port_pin+0x14>
    1450:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1452:	50 8b       	std	Z+16, r21	; 0x10
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    145a:	28 30       	cpi	r18, 0x08	; 8
    145c:	31 05       	cpc	r19, r1
    145e:	89 f7       	brne	.-30     	; 0x1442 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1460:	40 ff       	sbrs	r20, 0
    1462:	0a c0       	rjmp	.+20     	; 0x1478 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1464:	41 ff       	sbrs	r20, 1
    1466:	03 c0       	rjmp	.+6      	; 0x146e <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1468:	fc 01       	movw	r30, r24
    146a:	65 83       	std	Z+5, r22	; 0x05
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    146e:	fc 01       	movw	r30, r24
    1470:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1472:	fc 01       	movw	r30, r24
    1474:	61 83       	std	Z+1, r22	; 0x01
    1476:	02 c0       	rjmp	.+4      	; 0x147c <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1478:	fc 01       	movw	r30, r24
    147a:	62 83       	std	Z+2, r22	; 0x02
	}
}
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1482:	43 e0       	ldi	r20, 0x03	; 3
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	80 ee       	ldi	r24, 0xE0	; 224
    148a:	97 e0       	ldi	r25, 0x07	; 7
    148c:	d3 df       	rcall	.-90     	; 0x1434 <ioport_configure_port_pin>
    148e:	43 e0       	ldi	r20, 0x03	; 3
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	80 ee       	ldi	r24, 0xE0	; 224
    1496:	97 e0       	ldi	r25, 0x07	; 7
    1498:	cd df       	rcall	.-102    	; 0x1434 <ioport_configure_port_pin>
    149a:	43 e0       	ldi	r20, 0x03	; 3
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	60 e1       	ldi	r22, 0x10	; 16
    14a0:	80 e6       	ldi	r24, 0x60	; 96
    14a2:	96 e0       	ldi	r25, 0x06	; 6
    14a4:	c7 df       	rcall	.-114    	; 0x1434 <ioport_configure_port_pin>
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e4       	ldi	r21, 0x40	; 64
    14aa:	60 e2       	ldi	r22, 0x20	; 32
    14ac:	80 e6       	ldi	r24, 0x60	; 96
    14ae:	96 e0       	ldi	r25, 0x06	; 6
    14b0:	c1 df       	rcall	.-126    	; 0x1434 <ioport_configure_port_pin>
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	5b e1       	ldi	r21, 0x1B	; 27
    14b6:	60 e2       	ldi	r22, 0x20	; 32
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	96 e0       	ldi	r25, 0x06	; 6
    14bc:	bb df       	rcall	.-138    	; 0x1434 <ioport_configure_port_pin>
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	5b e1       	ldi	r21, 0x1B	; 27
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	80 ea       	ldi	r24, 0xA0	; 160
    14c6:	96 e0       	ldi	r25, 0x06	; 6
    14c8:	b5 df       	rcall	.-150    	; 0x1434 <ioport_configure_port_pin>
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	5b e1       	ldi	r21, 0x1B	; 27
    14ce:	64 e0       	ldi	r22, 0x04	; 4
    14d0:	80 ea       	ldi	r24, 0xA0	; 160
    14d2:	96 e0       	ldi	r25, 0x06	; 6
    14d4:	af df       	rcall	.-162    	; 0x1434 <ioport_configure_port_pin>
    14d6:	43 e0       	ldi	r20, 0x03	; 3
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	62 e0       	ldi	r22, 0x02	; 2
    14dc:	80 e6       	ldi	r24, 0x60	; 96
    14de:	96 e0       	ldi	r25, 0x06	; 6
    14e0:	a9 df       	rcall	.-174    	; 0x1434 <ioport_configure_port_pin>
    14e2:	43 e0       	ldi	r20, 0x03	; 3
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	68 e0       	ldi	r22, 0x08	; 8
    14e8:	80 e6       	ldi	r24, 0x60	; 96
    14ea:	96 e0       	ldi	r25, 0x06	; 6
    14ec:	a3 df       	rcall	.-186    	; 0x1434 <ioport_configure_port_pin>
    14ee:	43 e0       	ldi	r20, 0x03	; 3
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	68 e0       	ldi	r22, 0x08	; 8
    14f4:	80 ea       	ldi	r24, 0xA0	; 160
    14f6:	96 e0       	ldi	r25, 0x06	; 6
    14f8:	9d df       	rcall	.-198    	; 0x1434 <ioport_configure_port_pin>
    14fa:	43 e0       	ldi	r20, 0x03	; 3
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	80 e6       	ldi	r24, 0x60	; 96
    1502:	96 e0       	ldi	r25, 0x06	; 6
    1504:	97 df       	rcall	.-210    	; 0x1434 <ioport_configure_port_pin>
    1506:	43 e0       	ldi	r20, 0x03	; 3
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	68 e0       	ldi	r22, 0x08	; 8
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	96 e0       	ldi	r25, 0x06	; 6
    1510:	91 df       	rcall	.-222    	; 0x1434 <ioport_configure_port_pin>
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	60 e1       	ldi	r22, 0x10	; 16
    1518:	80 e8       	ldi	r24, 0x80	; 128
    151a:	96 e0       	ldi	r25, 0x06	; 6
    151c:	8b df       	rcall	.-234    	; 0x1434 <ioport_configure_port_pin>
    151e:	43 e0       	ldi	r20, 0x03	; 3
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	62 e0       	ldi	r22, 0x02	; 2
    1524:	80 e6       	ldi	r24, 0x60	; 96
    1526:	96 e0       	ldi	r25, 0x06	; 6
    1528:	85 df       	rcall	.-246    	; 0x1434 <ioport_configure_port_pin>
    152a:	43 e0       	ldi	r20, 0x03	; 3
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	68 e0       	ldi	r22, 0x08	; 8
    1530:	80 e6       	ldi	r24, 0x60	; 96
    1532:	96 e0       	ldi	r25, 0x06	; 6
    1534:	7f df       	rcall	.-258    	; 0x1434 <ioport_configure_port_pin>
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	64 e0       	ldi	r22, 0x04	; 4
    153c:	80 e6       	ldi	r24, 0x60	; 96
    153e:	96 e0       	ldi	r25, 0x06	; 6
    1540:	79 df       	rcall	.-270    	; 0x1434 <ioport_configure_port_pin>
    1542:	43 e0       	ldi	r20, 0x03	; 3
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	60 e1       	ldi	r22, 0x10	; 16
    1548:	80 ea       	ldi	r24, 0xA0	; 160
    154a:	96 e0       	ldi	r25, 0x06	; 6
    154c:	73 df       	rcall	.-282    	; 0x1434 <ioport_configure_port_pin>
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	96 e0       	ldi	r25, 0x06	; 6
    1558:	6d df       	rcall	.-294    	; 0x1434 <ioport_configure_port_pin>
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	64 e0       	ldi	r22, 0x04	; 4
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	96 e0       	ldi	r25, 0x06	; 6
    1564:	67 df       	rcall	.-306    	; 0x1434 <ioport_configure_port_pin>
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	80 e2       	ldi	r24, 0x20	; 32
    156e:	96 e0       	ldi	r25, 0x06	; 6
    1570:	61 df       	rcall	.-318    	; 0x1434 <ioport_configure_port_pin>
    1572:	43 e0       	ldi	r20, 0x03	; 3
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	68 e0       	ldi	r22, 0x08	; 8
    1578:	80 e4       	ldi	r24, 0x40	; 64
    157a:	96 e0       	ldi	r25, 0x06	; 6
    157c:	5b df       	rcall	.-330    	; 0x1434 <ioport_configure_port_pin>
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	80 e4       	ldi	r24, 0x40	; 64
    1586:	96 e0       	ldi	r25, 0x06	; 6
    1588:	55 df       	rcall	.-342    	; 0x1434 <ioport_configure_port_pin>
    158a:	43 e0       	ldi	r20, 0x03	; 3
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	68 e0       	ldi	r22, 0x08	; 8
    1590:	80 e6       	ldi	r24, 0x60	; 96
    1592:	96 e0       	ldi	r25, 0x06	; 6
    1594:	4f df       	rcall	.-354    	; 0x1434 <ioport_configure_port_pin>
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	64 e0       	ldi	r22, 0x04	; 4
    159c:	80 e6       	ldi	r24, 0x60	; 96
    159e:	96 e0       	ldi	r25, 0x06	; 6
    15a0:	49 df       	rcall	.-366    	; 0x1434 <ioport_configure_port_pin>
    15a2:	43 e0       	ldi	r20, 0x03	; 3
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	68 e0       	ldi	r22, 0x08	; 8
    15a8:	80 e8       	ldi	r24, 0x80	; 128
    15aa:	96 e0       	ldi	r25, 0x06	; 6
    15ac:	43 df       	rcall	.-378    	; 0x1434 <ioport_configure_port_pin>
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	64 e0       	ldi	r22, 0x04	; 4
    15b4:	80 e8       	ldi	r24, 0x80	; 128
    15b6:	96 e0       	ldi	r25, 0x06	; 6
    15b8:	3d cf       	rjmp	.-390    	; 0x1434 <ioport_configure_port_pin>
    15ba:	08 95       	ret

000015bc <slave_process>:
volatile Bool tx_in_progress_f = false;

// Setup a slave process, the process is accessed each time a byte is received
static void slave_process(void)
{
	tx_in_progress_f = true;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 53 20 	sts	0x2053, r24	; 0x802053 <tx_in_progress_f>
    15c2:	08 95       	ret

000015c4 <my_callback>:
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    15c4:	e0 e0       	ldi	r30, 0x00	; 0
    15c6:	f8 e0       	ldi	r31, 0x08	; 8
    15c8:	84 85       	ldd	r24, Z+12	; 0x0c
    15ca:	81 60       	ori	r24, 0x01	; 1
    15cc:	84 87       	std	Z+12, r24	; 0x0c
    15ce:	08 95       	ret

000015d0 <__vector_12>:
	tc_clear_overflow(&TCC0);
}

// The ISR is accessed each time a byte is received
ISR(TWIC_TWIS_vect)
{
    15d0:	1f 92       	push	r1
    15d2:	0f 92       	push	r0
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	0f 92       	push	r0
    15d8:	11 24       	eor	r1, r1
    15da:	0b b6       	in	r0, 0x3b	; 59
    15dc:	0f 92       	push	r0
    15de:	2f 93       	push	r18
    15e0:	3f 93       	push	r19
    15e2:	4f 93       	push	r20
    15e4:	5f 93       	push	r21
    15e6:	6f 93       	push	r22
    15e8:	7f 93       	push	r23
    15ea:	8f 93       	push	r24
    15ec:	9f 93       	push	r25
    15ee:	af 93       	push	r26
    15f0:	bf 93       	push	r27
    15f2:	ef 93       	push	r30
    15f4:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&slave);
    15f6:	8a e5       	ldi	r24, 0x5A	; 90
    15f8:	90 e2       	ldi	r25, 0x20	; 32
    15fa:	0e 94 c5 02 	call	0x58a	; 0x58a <TWI_SlaveInterruptHandler>
}
    15fe:	ff 91       	pop	r31
    1600:	ef 91       	pop	r30
    1602:	bf 91       	pop	r27
    1604:	af 91       	pop	r26
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	7f 91       	pop	r23
    160c:	6f 91       	pop	r22
    160e:	5f 91       	pop	r21
    1610:	4f 91       	pop	r20
    1612:	3f 91       	pop	r19
    1614:	2f 91       	pop	r18
    1616:	0f 90       	pop	r0
    1618:	0b be       	out	0x3b, r0	; 59
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti

00001624 <twi_slave_init>:

void twi_slave_init(	TWI_Slave_t *twi, TWI_t *module,void (*processDataFunction) (void),uint8_t address,
TWI_SLAVE_INTLVL_t intLevel) {
    1624:	cf 92       	push	r12
    1626:	df 92       	push	r13
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	7c 01       	movw	r14, r24
    1636:	eb 01       	movw	r28, r22
    1638:	6a 01       	movw	r12, r20
    163a:	12 2f       	mov	r17, r18
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
	*/

	// Initialise Slave
	for (i=0;i<TWIS_SEND_BUFFER_SIZE;i++)
	{
		twi->receivedData[i] = 0;
    1640:	f7 01       	movw	r30, r14
    1642:	e8 0f       	add	r30, r24
    1644:	f9 1f       	adc	r31, r25
    1646:	14 82       	std	Z+4, r1	; 0x04
    1648:	01 96       	adiw	r24, 0x01	; 1
		slave address (has to be compliant with master),
		slave module interrupt level
	*/

	// Initialise Slave
	for (i=0;i<TWIS_SEND_BUFFER_SIZE;i++)
    164a:	88 30       	cpi	r24, 0x08	; 8
    164c:	91 05       	cpc	r25, r1
    164e:	c1 f7       	brne	.-16     	; 0x1640 <twi_slave_init+0x1c>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1650:	20 97       	sbiw	r28, 0x00	; 0
    1652:	09 f4       	brne	.+2      	; 0x1656 <twi_slave_init+0x32>
    1654:	03 c1       	rjmp	.+518    	; 0x185c <twi_slave_init+0x238>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1656:	c0 3c       	cpi	r28, 0xC0	; 192
    1658:	d1 05       	cpc	r29, r1
    165a:	29 f4       	brne	.+10     	; 0x1666 <twi_slave_init+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    165c:	60 e1       	ldi	r22, 0x10	; 16
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1664:	fb c0       	rjmp	.+502    	; 0x185c <twi_slave_init+0x238>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1666:	c0 38       	cpi	r28, 0x80	; 128
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	d8 07       	cpc	r29, r24
    166c:	29 f4       	brne	.+10     	; 0x1678 <twi_slave_init+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    166e:	62 e0       	ldi	r22, 0x02	; 2
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1676:	f2 c0       	rjmp	.+484    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1678:	c1 15       	cp	r28, r1
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	d8 07       	cpc	r29, r24
    167e:	29 f4       	brne	.+10     	; 0x168a <twi_slave_init+0x66>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1688:	e9 c0       	rjmp	.+466    	; 0x185c <twi_slave_init+0x238>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    168a:	c0 38       	cpi	r28, 0x80	; 128
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	d8 07       	cpc	r29, r24
    1690:	29 f4       	brne	.+10     	; 0x169c <twi_slave_init+0x78>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    169a:	e0 c0       	rjmp	.+448    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    169c:	c0 39       	cpi	r28, 0x90	; 144
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	d8 07       	cpc	r29, r24
    16a2:	29 f4       	brne	.+10     	; 0x16ae <twi_slave_init+0x8a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    16ac:	d7 c0       	rjmp	.+430    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    16ae:	c1 15       	cp	r28, r1
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	d8 07       	cpc	r29, r24
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <twi_slave_init+0x9c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    16be:	ce c0       	rjmp	.+412    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    16c0:	c0 34       	cpi	r28, 0x40	; 64
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	d8 07       	cpc	r29, r24
    16c6:	29 f4       	brne	.+10     	; 0x16d2 <twi_slave_init+0xae>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    16c8:	62 e0       	ldi	r22, 0x02	; 2
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    16d0:	c5 c0       	rjmp	.+394    	; 0x185c <twi_slave_init+0x238>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    16d2:	c0 32       	cpi	r28, 0x20	; 32
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	d8 07       	cpc	r29, r24
    16d8:	29 f4       	brne	.+10     	; 0x16e4 <twi_slave_init+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    16da:	64 e0       	ldi	r22, 0x04	; 4
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    16e2:	bc c0       	rjmp	.+376    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    16e4:	c1 15       	cp	r28, r1
    16e6:	88 e0       	ldi	r24, 0x08	; 8
    16e8:	d8 07       	cpc	r29, r24
    16ea:	29 f4       	brne	.+10     	; 0x16f6 <twi_slave_init+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    16f4:	b3 c0       	rjmp	.+358    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    16f6:	c1 15       	cp	r28, r1
    16f8:	89 e0       	ldi	r24, 0x09	; 9
    16fa:	d8 07       	cpc	r29, r24
    16fc:	29 f4       	brne	.+10     	; 0x1708 <twi_slave_init+0xe4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	84 e0       	ldi	r24, 0x04	; 4
    1702:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1706:	aa c0       	rjmp	.+340    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1708:	c1 15       	cp	r28, r1
    170a:	8a e0       	ldi	r24, 0x0A	; 10
    170c:	d8 07       	cpc	r29, r24
    170e:	29 f4       	brne	.+10     	; 0x171a <twi_slave_init+0xf6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1718:	a1 c0       	rjmp	.+322    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    171a:	c1 15       	cp	r28, r1
    171c:	8b e0       	ldi	r24, 0x0B	; 11
    171e:	d8 07       	cpc	r29, r24
    1720:	29 f4       	brne	.+10     	; 0x172c <twi_slave_init+0x108>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	86 e0       	ldi	r24, 0x06	; 6
    1726:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    172a:	98 c0       	rjmp	.+304    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    172c:	c0 34       	cpi	r28, 0x40	; 64
    172e:	88 e0       	ldi	r24, 0x08	; 8
    1730:	d8 07       	cpc	r29, r24
    1732:	29 f4       	brne	.+10     	; 0x173e <twi_slave_init+0x11a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1734:	62 e0       	ldi	r22, 0x02	; 2
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    173c:	8f c0       	rjmp	.+286    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    173e:	c0 34       	cpi	r28, 0x40	; 64
    1740:	89 e0       	ldi	r24, 0x09	; 9
    1742:	d8 07       	cpc	r29, r24
    1744:	29 f4       	brne	.+10     	; 0x1750 <twi_slave_init+0x12c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    174e:	86 c0       	rjmp	.+268    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1750:	c0 34       	cpi	r28, 0x40	; 64
    1752:	8a e0       	ldi	r24, 0x0A	; 10
    1754:	d8 07       	cpc	r29, r24
    1756:	29 f4       	brne	.+10     	; 0x1762 <twi_slave_init+0x13e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	85 e0       	ldi	r24, 0x05	; 5
    175c:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1760:	7d c0       	rjmp	.+250    	; 0x185c <twi_slave_init+0x238>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1762:	c0 39       	cpi	r28, 0x90	; 144
    1764:	88 e0       	ldi	r24, 0x08	; 8
    1766:	d8 07       	cpc	r29, r24
    1768:	29 f4       	brne	.+10     	; 0x1774 <twi_slave_init+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    176a:	64 e0       	ldi	r22, 0x04	; 4
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1772:	74 c0       	rjmp	.+232    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1774:	c0 39       	cpi	r28, 0x90	; 144
    1776:	89 e0       	ldi	r24, 0x09	; 9
    1778:	d8 07       	cpc	r29, r24
    177a:	29 f4       	brne	.+10     	; 0x1786 <twi_slave_init+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    177c:	64 e0       	ldi	r22, 0x04	; 4
    177e:	84 e0       	ldi	r24, 0x04	; 4
    1780:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1784:	6b c0       	rjmp	.+214    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1786:	c0 39       	cpi	r28, 0x90	; 144
    1788:	8a e0       	ldi	r24, 0x0A	; 10
    178a:	d8 07       	cpc	r29, r24
    178c:	29 f4       	brne	.+10     	; 0x1798 <twi_slave_init+0x174>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    178e:	64 e0       	ldi	r22, 0x04	; 4
    1790:	85 e0       	ldi	r24, 0x05	; 5
    1792:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1796:	62 c0       	rjmp	.+196    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1798:	c0 39       	cpi	r28, 0x90	; 144
    179a:	8b e0       	ldi	r24, 0x0B	; 11
    179c:	d8 07       	cpc	r29, r24
    179e:	29 f4       	brne	.+10     	; 0x17aa <twi_slave_init+0x186>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    17a0:	64 e0       	ldi	r22, 0x04	; 4
    17a2:	86 e0       	ldi	r24, 0x06	; 6
    17a4:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    17a8:	59 c0       	rjmp	.+178    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    17aa:	c0 3c       	cpi	r28, 0xC0	; 192
    17ac:	88 e0       	ldi	r24, 0x08	; 8
    17ae:	d8 07       	cpc	r29, r24
    17b0:	29 f4       	brne	.+10     	; 0x17bc <twi_slave_init+0x198>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    17b2:	68 e0       	ldi	r22, 0x08	; 8
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    17ba:	50 c0       	rjmp	.+160    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    17bc:	c0 3c       	cpi	r28, 0xC0	; 192
    17be:	89 e0       	ldi	r24, 0x09	; 9
    17c0:	d8 07       	cpc	r29, r24
    17c2:	29 f4       	brne	.+10     	; 0x17ce <twi_slave_init+0x1aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    17c4:	68 e0       	ldi	r22, 0x08	; 8
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    17cc:	47 c0       	rjmp	.+142    	; 0x185c <twi_slave_init+0x238>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    17ce:	c0 3a       	cpi	r28, 0xA0	; 160
    17d0:	88 e0       	ldi	r24, 0x08	; 8
    17d2:	d8 07       	cpc	r29, r24
    17d4:	29 f4       	brne	.+10     	; 0x17e0 <twi_slave_init+0x1bc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    17d6:	60 e1       	ldi	r22, 0x10	; 16
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    17de:	3e c0       	rjmp	.+124    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    17e0:	c0 3a       	cpi	r28, 0xA0	; 160
    17e2:	89 e0       	ldi	r24, 0x09	; 9
    17e4:	d8 07       	cpc	r29, r24
    17e6:	29 f4       	brne	.+10     	; 0x17f2 <twi_slave_init+0x1ce>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    17e8:	60 e1       	ldi	r22, 0x10	; 16
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    17f0:	35 c0       	rjmp	.+106    	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    17f2:	c0 3a       	cpi	r28, 0xA0	; 160
    17f4:	8a e0       	ldi	r24, 0x0A	; 10
    17f6:	d8 07       	cpc	r29, r24
    17f8:	29 f4       	brne	.+10     	; 0x1804 <twi_slave_init+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    17fa:	60 e1       	ldi	r22, 0x10	; 16
    17fc:	85 e0       	ldi	r24, 0x05	; 5
    17fe:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1802:	2c c0       	rjmp	.+88     	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1804:	c0 3a       	cpi	r28, 0xA0	; 160
    1806:	8b e0       	ldi	r24, 0x0B	; 11
    1808:	d8 07       	cpc	r29, r24
    180a:	29 f4       	brne	.+10     	; 0x1816 <twi_slave_init+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    180c:	60 e1       	ldi	r22, 0x10	; 16
    180e:	86 e0       	ldi	r24, 0x06	; 6
    1810:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1814:	23 c0       	rjmp	.+70     	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1816:	c0 3b       	cpi	r28, 0xB0	; 176
    1818:	88 e0       	ldi	r24, 0x08	; 8
    181a:	d8 07       	cpc	r29, r24
    181c:	29 f4       	brne	.+10     	; 0x1828 <twi_slave_init+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    181e:	60 e2       	ldi	r22, 0x20	; 32
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1826:	1a c0       	rjmp	.+52     	; 0x185c <twi_slave_init+0x238>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1828:	c0 3b       	cpi	r28, 0xB0	; 176
    182a:	89 e0       	ldi	r24, 0x09	; 9
    182c:	d8 07       	cpc	r29, r24
    182e:	29 f4       	brne	.+10     	; 0x183a <twi_slave_init+0x216>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1830:	60 e2       	ldi	r22, 0x20	; 32
    1832:	84 e0       	ldi	r24, 0x04	; 4
    1834:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    1838:	11 c0       	rjmp	.+34     	; 0x185c <twi_slave_init+0x238>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    183a:	c0 38       	cpi	r28, 0x80	; 128
    183c:	84 e0       	ldi	r24, 0x04	; 4
    183e:	d8 07       	cpc	r29, r24
    1840:	29 f4       	brne	.+10     	; 0x184c <twi_slave_init+0x228>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1842:	60 e4       	ldi	r22, 0x40	; 64
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
    184a:	08 c0       	rjmp	.+16     	; 0x185c <twi_slave_init+0x238>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    184c:	c0 3a       	cpi	r28, 0xA0	; 160
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	d8 07       	cpc	r29, r24
    1852:	21 f4       	brne	.+8      	; 0x185c <twi_slave_init+0x238>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1854:	60 e4       	ldi	r22, 0x40	; 64
    1856:	85 e0       	ldi	r24, 0x05	; 5
    1858:	0e 94 01 03 	call	0x602	; 0x602 <sysclk_enable_module>
		twi->receivedData[i] = 0;
		//twi->sendData[i] - Used to specify the send data when a master reads
	}

	sysclk_enable_peripheral_clock(module);	//enable the TWI module
	TWI_SlaveInitializeDriver(twi, module, processDataFunction);	//I2C driver
    185c:	a6 01       	movw	r20, r12
    185e:	be 01       	movw	r22, r28
    1860:	c7 01       	movw	r24, r14
    1862:	0e 94 05 02 	call	0x40a	; 0x40a <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(twi,address,intLevel);	//set slave address and interrupt level
    1866:	40 2f       	mov	r20, r16
    1868:	61 2f       	mov	r22, r17
    186a:	c7 01       	movw	r24, r14
    186c:	0e 94 10 02 	call	0x420	; 0x420 <TWI_SlaveInitializeModule>
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	08 95       	ret

00001882 <main>:

int main (void)
{
	sysclk_init();
    1882:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1886:	fd dd       	rcall	.-1030   	; 0x1482 <board_init>
    1888:	e0 ea       	ldi	r30, 0xA0	; 160
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	87 e0       	ldi	r24, 0x07	; 7

	uint16_t i=0;
	uint8_t storeA = 0;
	uint8_t	 storeB = 0;

	irq_initialize_vectors();
    188e:	82 83       	std	Z+2, r24	; 0x02
	
	twi_slave_init(	&slave,
    1890:	82 83       	std	Z+2, r24	; 0x02
    1892:	00 e8       	ldi	r16, 0x80	; 128
    1894:	20 e6       	ldi	r18, 0x60	; 96
    1896:	4e ed       	ldi	r20, 0xDE	; 222
    1898:	5a e0       	ldi	r21, 0x0A	; 10
    189a:	60 e8       	ldi	r22, 0x80	; 128
    189c:	74 e0       	ldi	r23, 0x04	; 4
    189e:	8a e5       	ldi	r24, 0x5A	; 90
	*slave_process,
	TWI_SLAVE_ADDR,
	TWI_SLAVE_INTLVL_MED_gc);
	
	//T/C module at portD set to function as a timer/counter
	tc_enable(&TCD0);
    18a0:	90 e2       	ldi	r25, 0x20	; 32
    18a2:	c0 de       	rcall	.-640    	; 0x1624 <twi_slave_init>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
	tc_set_overflow_interrupt_callback(&TCD0, my_callback);
    18a6:	99 e0       	ldi	r25, 0x09	; 9
    18a8:	16 dd       	rcall	.-1492   	; 0x12d6 <tc_enable>
    18aa:	62 ee       	ldi	r22, 0xE2	; 226
    18ac:	7a e0       	ldi	r23, 0x0A	; 10
    18ae:	80 e0       	ldi	r24, 0x00	; 0
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    18b0:	99 e0       	ldi	r25, 0x09	; 9
    18b2:	82 dd       	rcall	.-1276   	; 0x13b8 <tc_set_overflow_interrupt_callback>
    18b4:	e0 e0       	ldi	r30, 0x00	; 0
    18b6:	f9 e0       	ldi	r31, 0x09	; 9
    18b8:	81 81       	ldd	r24, Z+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    18ba:	88 7f       	andi	r24, 0xF8	; 248
    18bc:	81 83       	std	Z+1, r24	; 0x01
    18be:	88 ee       	ldi	r24, 0xE8	; 232
    18c0:	93 e0       	ldi	r25, 0x03	; 3
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    18c2:	86 a3       	std	Z+38, r24	; 0x26
    18c4:	97 a3       	std	Z+39, r25	; 0x27
    18c6:	86 81       	ldd	r24, Z+6	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    18c8:	8c 7f       	andi	r24, 0xFC	; 252
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    18ca:	86 83       	std	Z+6, r24	; 0x06
    18cc:	86 81       	ldd	r24, Z+6	; 0x06
	tc_set_wgm(&TCD0, TC_WG_NORMAL);
	tc_write_period(&TCD0, 1000);
	tc_set_overflow_interrupt_level(&TCD0, TC_INT_LVL_LO);

	cpu_irq_enable();
    18ce:	81 60       	ori	r24, 0x01	; 1
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    18d0:	86 83       	std	Z+6, r24	; 0x06
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    18d2:	78 94       	sei
    18d4:	80 81       	ld	r24, Z
    18d6:	80 7f       	andi	r24, 0xF0	; 240
	slave.sendData[4] = 0x99;*/

	//slave.sendData = 
	while (1) {
		//Test case use of Counter to set the sendData buffer of the slave
		i = TCD0_CNT;
    18d8:	81 60       	ori	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
		slave.sendData[0] = (i >> 8);
    18dc:	a0 e2       	ldi	r26, 0x20	; 32
    18de:	b9 e0       	ldi	r27, 0x09	; 9

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    18e0:	ea e5       	ldi	r30, 0x5A	; 90
    18e2:	f0 e2       	ldi	r31, 0x20	; 32
    18e4:	c0 ee       	ldi	r28, 0xE0	; 224
	slave.sendData[4] = 0x99;*/

	//slave.sendData = 
	while (1) {
		//Test case use of Counter to set the sendData buffer of the slave
		i = TCD0_CNT;
    18e6:	d7 e0       	ldi	r29, 0x07	; 7
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	8d 91       	ld	r24, X+
		slave.sendData[0] = (i >> 8);
    18ec:	9c 91       	ld	r25, X
		slave.sendData[1] = (i) & 0xff; 
    18ee:	11 97       	sbiw	r26, 0x01	; 1

		// Check transmission in progress flag
		if(tx_in_progress_f)
    18f0:	94 87       	std	Z+12, r25	; 0x0c
    18f2:	85 87       	std	Z+13, r24	; 0x0d
    18f4:	80 91 53 20 	lds	r24, 0x2053	; 0x802053 <tx_in_progress_f>
		{
			storeA = slave.sendData[0];
    18f8:	88 23       	and	r24, r24
			storeB = slave.sendData[1];
    18fa:	b9 f3       	breq	.-18     	; 0x18ea <main+0x68>
    18fc:	84 85       	ldd	r24, Z+12	; 0x0c
			};

			LED_Toggle(LED0);				// toggle LED
			// Reset Flag
			/*** Break Point ***/
			tx_in_progress_f = false;
    18fe:	85 85       	ldd	r24, Z+13	; 0x0d
    1900:	2f 83       	std	Y+7, r18	; 0x07
    1902:	10 92 53 20 	sts	0x2053, r1	; 0x802053 <tx_in_progress_f>
    1906:	f1 cf       	rjmp	.-30     	; 0x18ea <main+0x68>

00001908 <_exit>:
    1908:	f8 94       	cli

0000190a <__stop_program>:
    190a:	ff cf       	rjmp	.-2      	; 0x190a <__stop_program>
